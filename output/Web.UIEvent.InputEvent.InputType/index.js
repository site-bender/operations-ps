// Generated by purs version 0.15.15
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
var compare = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordString);
var InsertText = /* #__PURE__ */ (function () {
    function InsertText() {

    };
    InsertText.value = new InsertText();
    return InsertText;
})();
var InsertReplacementText = /* #__PURE__ */ (function () {
    function InsertReplacementText() {

    };
    InsertReplacementText.value = new InsertReplacementText();
    return InsertReplacementText;
})();
var InsertLineBreak = /* #__PURE__ */ (function () {
    function InsertLineBreak() {

    };
    InsertLineBreak.value = new InsertLineBreak();
    return InsertLineBreak;
})();
var InsertParagraph = /* #__PURE__ */ (function () {
    function InsertParagraph() {

    };
    InsertParagraph.value = new InsertParagraph();
    return InsertParagraph;
})();
var InsertOrderedList = /* #__PURE__ */ (function () {
    function InsertOrderedList() {

    };
    InsertOrderedList.value = new InsertOrderedList();
    return InsertOrderedList;
})();
var InsertUnorderedList = /* #__PURE__ */ (function () {
    function InsertUnorderedList() {

    };
    InsertUnorderedList.value = new InsertUnorderedList();
    return InsertUnorderedList;
})();
var InsertHorizontalRule = /* #__PURE__ */ (function () {
    function InsertHorizontalRule() {

    };
    InsertHorizontalRule.value = new InsertHorizontalRule();
    return InsertHorizontalRule;
})();
var InsertFromYank = /* #__PURE__ */ (function () {
    function InsertFromYank() {

    };
    InsertFromYank.value = new InsertFromYank();
    return InsertFromYank;
})();
var InsertFromDrop = /* #__PURE__ */ (function () {
    function InsertFromDrop() {

    };
    InsertFromDrop.value = new InsertFromDrop();
    return InsertFromDrop;
})();
var InsertFromPaste = /* #__PURE__ */ (function () {
    function InsertFromPaste() {

    };
    InsertFromPaste.value = new InsertFromPaste();
    return InsertFromPaste;
})();
var InsertFromPasteAsQuotation = /* #__PURE__ */ (function () {
    function InsertFromPasteAsQuotation() {

    };
    InsertFromPasteAsQuotation.value = new InsertFromPasteAsQuotation();
    return InsertFromPasteAsQuotation;
})();
var InsertTranspose = /* #__PURE__ */ (function () {
    function InsertTranspose() {

    };
    InsertTranspose.value = new InsertTranspose();
    return InsertTranspose;
})();
var InsertCompositionText = /* #__PURE__ */ (function () {
    function InsertCompositionText() {

    };
    InsertCompositionText.value = new InsertCompositionText();
    return InsertCompositionText;
})();
var InsertLink = /* #__PURE__ */ (function () {
    function InsertLink() {

    };
    InsertLink.value = new InsertLink();
    return InsertLink;
})();
var DeleteWordBackward = /* #__PURE__ */ (function () {
    function DeleteWordBackward() {

    };
    DeleteWordBackward.value = new DeleteWordBackward();
    return DeleteWordBackward;
})();
var DeleteWordForward = /* #__PURE__ */ (function () {
    function DeleteWordForward() {

    };
    DeleteWordForward.value = new DeleteWordForward();
    return DeleteWordForward;
})();
var DeleteSoftLineBackward = /* #__PURE__ */ (function () {
    function DeleteSoftLineBackward() {

    };
    DeleteSoftLineBackward.value = new DeleteSoftLineBackward();
    return DeleteSoftLineBackward;
})();
var DeleteSoftLineForward = /* #__PURE__ */ (function () {
    function DeleteSoftLineForward() {

    };
    DeleteSoftLineForward.value = new DeleteSoftLineForward();
    return DeleteSoftLineForward;
})();
var DeleteEntireSoftLine = /* #__PURE__ */ (function () {
    function DeleteEntireSoftLine() {

    };
    DeleteEntireSoftLine.value = new DeleteEntireSoftLine();
    return DeleteEntireSoftLine;
})();
var DeleteHardLineBackward = /* #__PURE__ */ (function () {
    function DeleteHardLineBackward() {

    };
    DeleteHardLineBackward.value = new DeleteHardLineBackward();
    return DeleteHardLineBackward;
})();
var DeleteHardLineForward = /* #__PURE__ */ (function () {
    function DeleteHardLineForward() {

    };
    DeleteHardLineForward.value = new DeleteHardLineForward();
    return DeleteHardLineForward;
})();
var DeleteByDrag = /* #__PURE__ */ (function () {
    function DeleteByDrag() {

    };
    DeleteByDrag.value = new DeleteByDrag();
    return DeleteByDrag;
})();
var DeleteByCut = /* #__PURE__ */ (function () {
    function DeleteByCut() {

    };
    DeleteByCut.value = new DeleteByCut();
    return DeleteByCut;
})();
var DeleteContent = /* #__PURE__ */ (function () {
    function DeleteContent() {

    };
    DeleteContent.value = new DeleteContent();
    return DeleteContent;
})();
var DeleteContentBackward = /* #__PURE__ */ (function () {
    function DeleteContentBackward() {

    };
    DeleteContentBackward.value = new DeleteContentBackward();
    return DeleteContentBackward;
})();
var DeleteContentForward = /* #__PURE__ */ (function () {
    function DeleteContentForward() {

    };
    DeleteContentForward.value = new DeleteContentForward();
    return DeleteContentForward;
})();
var HistoryUndo = /* #__PURE__ */ (function () {
    function HistoryUndo() {

    };
    HistoryUndo.value = new HistoryUndo();
    return HistoryUndo;
})();
var HistoryRedo = /* #__PURE__ */ (function () {
    function HistoryRedo() {

    };
    HistoryRedo.value = new HistoryRedo();
    return HistoryRedo;
})();
var FormatBold = /* #__PURE__ */ (function () {
    function FormatBold() {

    };
    FormatBold.value = new FormatBold();
    return FormatBold;
})();
var FormatItalic = /* #__PURE__ */ (function () {
    function FormatItalic() {

    };
    FormatItalic.value = new FormatItalic();
    return FormatItalic;
})();
var FormatUnderline = /* #__PURE__ */ (function () {
    function FormatUnderline() {

    };
    FormatUnderline.value = new FormatUnderline();
    return FormatUnderline;
})();
var FormatStrikeThrough = /* #__PURE__ */ (function () {
    function FormatStrikeThrough() {

    };
    FormatStrikeThrough.value = new FormatStrikeThrough();
    return FormatStrikeThrough;
})();
var FormatSuperscript = /* #__PURE__ */ (function () {
    function FormatSuperscript() {

    };
    FormatSuperscript.value = new FormatSuperscript();
    return FormatSuperscript;
})();
var FormatSubscript = /* #__PURE__ */ (function () {
    function FormatSubscript() {

    };
    FormatSubscript.value = new FormatSubscript();
    return FormatSubscript;
})();
var FormatJustifyFull = /* #__PURE__ */ (function () {
    function FormatJustifyFull() {

    };
    FormatJustifyFull.value = new FormatJustifyFull();
    return FormatJustifyFull;
})();
var FormatJustifyCenter = /* #__PURE__ */ (function () {
    function FormatJustifyCenter() {

    };
    FormatJustifyCenter.value = new FormatJustifyCenter();
    return FormatJustifyCenter;
})();
var FormatJustifyRight = /* #__PURE__ */ (function () {
    function FormatJustifyRight() {

    };
    FormatJustifyRight.value = new FormatJustifyRight();
    return FormatJustifyRight;
})();
var FormatJustifyLeft = /* #__PURE__ */ (function () {
    function FormatJustifyLeft() {

    };
    FormatJustifyLeft.value = new FormatJustifyLeft();
    return FormatJustifyLeft;
})();
var FormatIndent = /* #__PURE__ */ (function () {
    function FormatIndent() {

    };
    FormatIndent.value = new FormatIndent();
    return FormatIndent;
})();
var FormatOutdent = /* #__PURE__ */ (function () {
    function FormatOutdent() {

    };
    FormatOutdent.value = new FormatOutdent();
    return FormatOutdent;
})();
var FormatRemove = /* #__PURE__ */ (function () {
    function FormatRemove() {

    };
    FormatRemove.value = new FormatRemove();
    return FormatRemove;
})();
var FormatSetBlockTextDirection = /* #__PURE__ */ (function () {
    function FormatSetBlockTextDirection() {

    };
    FormatSetBlockTextDirection.value = new FormatSetBlockTextDirection();
    return FormatSetBlockTextDirection;
})();
var FormatSetInlineTextDirection = /* #__PURE__ */ (function () {
    function FormatSetInlineTextDirection() {

    };
    FormatSetInlineTextDirection.value = new FormatSetInlineTextDirection();
    return FormatSetInlineTextDirection;
})();
var FormatBackColor = /* #__PURE__ */ (function () {
    function FormatBackColor() {

    };
    FormatBackColor.value = new FormatBackColor();
    return FormatBackColor;
})();
var FormatFontColor = /* #__PURE__ */ (function () {
    function FormatFontColor() {

    };
    FormatFontColor.value = new FormatFontColor();
    return FormatFontColor;
})();
var FormatFontName = /* #__PURE__ */ (function () {
    function FormatFontName() {

    };
    FormatFontName.value = new FormatFontName();
    return FormatFontName;
})();
var Other = /* #__PURE__ */ (function () {
    function Other(value0) {
        this.value0 = value0;
    };
    Other.create = function (value0) {
        return new Other(value0);
    };
    return Other;
})();
var print = function (v) {
    if (v instanceof InsertText) {
        return "insertText";
    };
    if (v instanceof InsertReplacementText) {
        return "insertReplacementText";
    };
    if (v instanceof InsertLineBreak) {
        return "insertLineBreak";
    };
    if (v instanceof InsertParagraph) {
        return "insertParagraph";
    };
    if (v instanceof InsertOrderedList) {
        return "insertOrderedList";
    };
    if (v instanceof InsertUnorderedList) {
        return "insertUnorderedList";
    };
    if (v instanceof InsertHorizontalRule) {
        return "insertHorizontalRule";
    };
    if (v instanceof InsertFromYank) {
        return "insertFromYank";
    };
    if (v instanceof InsertFromDrop) {
        return "insertFromDrop";
    };
    if (v instanceof InsertFromPaste) {
        return "insertFromPaste";
    };
    if (v instanceof InsertFromPasteAsQuotation) {
        return "insertFromPasteAsQuotation";
    };
    if (v instanceof InsertTranspose) {
        return "insertTranspose";
    };
    if (v instanceof InsertCompositionText) {
        return "insertCompositionText";
    };
    if (v instanceof InsertLink) {
        return "insertLink";
    };
    if (v instanceof DeleteWordBackward) {
        return "deleteWordBackward";
    };
    if (v instanceof DeleteWordForward) {
        return "deleteWordForward";
    };
    if (v instanceof DeleteSoftLineBackward) {
        return "deleteSoftLineBackward";
    };
    if (v instanceof DeleteSoftLineForward) {
        return "deleteSoftLineForward";
    };
    if (v instanceof DeleteEntireSoftLine) {
        return "deleteEntireSoftLine";
    };
    if (v instanceof DeleteHardLineBackward) {
        return "deleteHardLineBackward";
    };
    if (v instanceof DeleteHardLineForward) {
        return "deleteHardLineForward";
    };
    if (v instanceof DeleteByDrag) {
        return "deleteByDrag";
    };
    if (v instanceof DeleteByCut) {
        return "deleteByCut";
    };
    if (v instanceof DeleteContent) {
        return "deleteContent";
    };
    if (v instanceof DeleteContentBackward) {
        return "deleteContentBackward";
    };
    if (v instanceof DeleteContentForward) {
        return "deleteContentForward";
    };
    if (v instanceof HistoryUndo) {
        return "historyUndo";
    };
    if (v instanceof HistoryRedo) {
        return "historyRedo";
    };
    if (v instanceof FormatBold) {
        return "formatBold";
    };
    if (v instanceof FormatItalic) {
        return "formatItalic";
    };
    if (v instanceof FormatUnderline) {
        return "formatUnderline";
    };
    if (v instanceof FormatStrikeThrough) {
        return "formatStrikeThrough";
    };
    if (v instanceof FormatSuperscript) {
        return "formatSuperscript";
    };
    if (v instanceof FormatSubscript) {
        return "formatSubscript";
    };
    if (v instanceof FormatJustifyFull) {
        return "formatJustifyFull";
    };
    if (v instanceof FormatJustifyCenter) {
        return "formatJustifyCenter";
    };
    if (v instanceof FormatJustifyRight) {
        return "formatJustifyRight";
    };
    if (v instanceof FormatJustifyLeft) {
        return "formatJustifyLeft";
    };
    if (v instanceof FormatIndent) {
        return "formatIndent";
    };
    if (v instanceof FormatOutdent) {
        return "formatOutdent";
    };
    if (v instanceof FormatRemove) {
        return "formatRemove";
    };
    if (v instanceof FormatSetBlockTextDirection) {
        return "formatSetBlockTextDirection";
    };
    if (v instanceof FormatSetInlineTextDirection) {
        return "formatSetInlineTextDirection";
    };
    if (v instanceof FormatBackColor) {
        return "formatBackColor";
    };
    if (v instanceof FormatFontColor) {
        return "formatFontColor";
    };
    if (v instanceof FormatFontName) {
        return "formatFontName";
    };
    if (v instanceof Other) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Web.UIEvent.InputEvent.InputType (line 109, column 1 - line 109, column 29): " + [ v.constructor.name ]);
};
var showInputType = {
    show: print
};
var parse = function (v) {
    if (v === "insertText") {
        return InsertText.value;
    };
    if (v === "insertReplacementText") {
        return InsertReplacementText.value;
    };
    if (v === "insertLineBreak") {
        return InsertLineBreak.value;
    };
    if (v === "insertParagraph") {
        return InsertParagraph.value;
    };
    if (v === "insertOrderedList") {
        return InsertOrderedList.value;
    };
    if (v === "insertUnorderedList") {
        return InsertUnorderedList.value;
    };
    if (v === "insertHorizontalRule") {
        return InsertHorizontalRule.value;
    };
    if (v === "insertFromYank") {
        return InsertFromYank.value;
    };
    if (v === "insertFromDrop") {
        return InsertFromDrop.value;
    };
    if (v === "insertFromPaste") {
        return InsertFromPaste.value;
    };
    if (v === "insertFromPasteAsQuotation") {
        return InsertFromPasteAsQuotation.value;
    };
    if (v === "insertTranspose") {
        return InsertTranspose.value;
    };
    if (v === "insertCompositionText") {
        return InsertCompositionText.value;
    };
    if (v === "insertLink") {
        return InsertLink.value;
    };
    if (v === "deleteWordBackward") {
        return DeleteWordBackward.value;
    };
    if (v === "deleteWordForward") {
        return DeleteWordForward.value;
    };
    if (v === "deleteSoftLineBackward") {
        return DeleteSoftLineBackward.value;
    };
    if (v === "deleteSoftLineForward") {
        return DeleteSoftLineForward.value;
    };
    if (v === "deleteEntireSoftLine") {
        return DeleteEntireSoftLine.value;
    };
    if (v === "deleteHardLineBackward") {
        return DeleteHardLineBackward.value;
    };
    if (v === "deleteHardLineForward") {
        return DeleteHardLineForward.value;
    };
    if (v === "deleteByDrag") {
        return DeleteByDrag.value;
    };
    if (v === "deleteByCut") {
        return DeleteByCut.value;
    };
    if (v === "deleteContent") {
        return DeleteContent.value;
    };
    if (v === "deleteContentBackward") {
        return DeleteContentBackward.value;
    };
    if (v === "deleteContentForward") {
        return DeleteContentForward.value;
    };
    if (v === "historyUndo") {
        return HistoryUndo.value;
    };
    if (v === "historyRedo") {
        return HistoryRedo.value;
    };
    if (v === "formatBold") {
        return FormatBold.value;
    };
    if (v === "formatItalic") {
        return FormatItalic.value;
    };
    if (v === "formatUnderline") {
        return FormatUnderline.value;
    };
    if (v === "formatStrikeThrough") {
        return FormatStrikeThrough.value;
    };
    if (v === "formatSuperscript") {
        return FormatSuperscript.value;
    };
    if (v === "formatSubscript") {
        return FormatSubscript.value;
    };
    if (v === "formatJustifyFull") {
        return FormatJustifyFull.value;
    };
    if (v === "formatJustifyCenter") {
        return FormatJustifyCenter.value;
    };
    if (v === "formatJustifyRight") {
        return FormatJustifyRight.value;
    };
    if (v === "formatJustifyLeft") {
        return FormatJustifyLeft.value;
    };
    if (v === "formatIndent") {
        return FormatIndent.value;
    };
    if (v === "formatOutdent") {
        return FormatOutdent.value;
    };
    if (v === "formatRemove") {
        return FormatRemove.value;
    };
    if (v === "formatSetBlockTextDirection") {
        return FormatSetBlockTextDirection.value;
    };
    if (v === "formatSetInlineTextDirection") {
        return FormatSetInlineTextDirection.value;
    };
    if (v === "formatBackColor") {
        return FormatBackColor.value;
    };
    if (v === "formatFontColor") {
        return FormatFontColor.value;
    };
    if (v === "formatFontName") {
        return FormatFontName.value;
    };
    return new Other(v);
};
var eqInputType = {
    eq: function (x) {
        return function (y) {
            if (x instanceof InsertText && y instanceof InsertText) {
                return true;
            };
            if (x instanceof InsertReplacementText && y instanceof InsertReplacementText) {
                return true;
            };
            if (x instanceof InsertLineBreak && y instanceof InsertLineBreak) {
                return true;
            };
            if (x instanceof InsertParagraph && y instanceof InsertParagraph) {
                return true;
            };
            if (x instanceof InsertOrderedList && y instanceof InsertOrderedList) {
                return true;
            };
            if (x instanceof InsertUnorderedList && y instanceof InsertUnorderedList) {
                return true;
            };
            if (x instanceof InsertHorizontalRule && y instanceof InsertHorizontalRule) {
                return true;
            };
            if (x instanceof InsertFromYank && y instanceof InsertFromYank) {
                return true;
            };
            if (x instanceof InsertFromDrop && y instanceof InsertFromDrop) {
                return true;
            };
            if (x instanceof InsertFromPaste && y instanceof InsertFromPaste) {
                return true;
            };
            if (x instanceof InsertFromPasteAsQuotation && y instanceof InsertFromPasteAsQuotation) {
                return true;
            };
            if (x instanceof InsertTranspose && y instanceof InsertTranspose) {
                return true;
            };
            if (x instanceof InsertCompositionText && y instanceof InsertCompositionText) {
                return true;
            };
            if (x instanceof InsertLink && y instanceof InsertLink) {
                return true;
            };
            if (x instanceof DeleteWordBackward && y instanceof DeleteWordBackward) {
                return true;
            };
            if (x instanceof DeleteWordForward && y instanceof DeleteWordForward) {
                return true;
            };
            if (x instanceof DeleteSoftLineBackward && y instanceof DeleteSoftLineBackward) {
                return true;
            };
            if (x instanceof DeleteSoftLineForward && y instanceof DeleteSoftLineForward) {
                return true;
            };
            if (x instanceof DeleteEntireSoftLine && y instanceof DeleteEntireSoftLine) {
                return true;
            };
            if (x instanceof DeleteHardLineBackward && y instanceof DeleteHardLineBackward) {
                return true;
            };
            if (x instanceof DeleteHardLineForward && y instanceof DeleteHardLineForward) {
                return true;
            };
            if (x instanceof DeleteByDrag && y instanceof DeleteByDrag) {
                return true;
            };
            if (x instanceof DeleteByCut && y instanceof DeleteByCut) {
                return true;
            };
            if (x instanceof DeleteContent && y instanceof DeleteContent) {
                return true;
            };
            if (x instanceof DeleteContentBackward && y instanceof DeleteContentBackward) {
                return true;
            };
            if (x instanceof DeleteContentForward && y instanceof DeleteContentForward) {
                return true;
            };
            if (x instanceof HistoryUndo && y instanceof HistoryUndo) {
                return true;
            };
            if (x instanceof HistoryRedo && y instanceof HistoryRedo) {
                return true;
            };
            if (x instanceof FormatBold && y instanceof FormatBold) {
                return true;
            };
            if (x instanceof FormatItalic && y instanceof FormatItalic) {
                return true;
            };
            if (x instanceof FormatUnderline && y instanceof FormatUnderline) {
                return true;
            };
            if (x instanceof FormatStrikeThrough && y instanceof FormatStrikeThrough) {
                return true;
            };
            if (x instanceof FormatSuperscript && y instanceof FormatSuperscript) {
                return true;
            };
            if (x instanceof FormatSubscript && y instanceof FormatSubscript) {
                return true;
            };
            if (x instanceof FormatJustifyFull && y instanceof FormatJustifyFull) {
                return true;
            };
            if (x instanceof FormatJustifyCenter && y instanceof FormatJustifyCenter) {
                return true;
            };
            if (x instanceof FormatJustifyRight && y instanceof FormatJustifyRight) {
                return true;
            };
            if (x instanceof FormatJustifyLeft && y instanceof FormatJustifyLeft) {
                return true;
            };
            if (x instanceof FormatIndent && y instanceof FormatIndent) {
                return true;
            };
            if (x instanceof FormatOutdent && y instanceof FormatOutdent) {
                return true;
            };
            if (x instanceof FormatRemove && y instanceof FormatRemove) {
                return true;
            };
            if (x instanceof FormatSetBlockTextDirection && y instanceof FormatSetBlockTextDirection) {
                return true;
            };
            if (x instanceof FormatSetInlineTextDirection && y instanceof FormatSetInlineTextDirection) {
                return true;
            };
            if (x instanceof FormatBackColor && y instanceof FormatBackColor) {
                return true;
            };
            if (x instanceof FormatFontColor && y instanceof FormatFontColor) {
                return true;
            };
            if (x instanceof FormatFontName && y instanceof FormatFontName) {
                return true;
            };
            if (x instanceof Other && y instanceof Other) {
                return x.value0 === y.value0;
            };
            return false;
        };
    }
};
var ordInputType = {
    compare: function (x) {
        return function (y) {
            if (x instanceof InsertText && y instanceof InsertText) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertText) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertText) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertReplacementText && y instanceof InsertReplacementText) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertReplacementText) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertReplacementText) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertLineBreak && y instanceof InsertLineBreak) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertLineBreak) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertLineBreak) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertParagraph && y instanceof InsertParagraph) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertParagraph) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertParagraph) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertOrderedList && y instanceof InsertOrderedList) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertOrderedList) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertOrderedList) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertUnorderedList && y instanceof InsertUnorderedList) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertUnorderedList) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertUnorderedList) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertHorizontalRule && y instanceof InsertHorizontalRule) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertHorizontalRule) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertHorizontalRule) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertFromYank && y instanceof InsertFromYank) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertFromYank) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertFromYank) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertFromDrop && y instanceof InsertFromDrop) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertFromDrop) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertFromDrop) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertFromPaste && y instanceof InsertFromPaste) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertFromPaste) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertFromPaste) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertFromPasteAsQuotation && y instanceof InsertFromPasteAsQuotation) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertFromPasteAsQuotation) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertFromPasteAsQuotation) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertTranspose && y instanceof InsertTranspose) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertTranspose) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertTranspose) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertCompositionText && y instanceof InsertCompositionText) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertCompositionText) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertCompositionText) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof InsertLink && y instanceof InsertLink) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof InsertLink) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof InsertLink) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteWordBackward && y instanceof DeleteWordBackward) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteWordBackward) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteWordBackward) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteWordForward && y instanceof DeleteWordForward) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteWordForward) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteWordForward) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteSoftLineBackward && y instanceof DeleteSoftLineBackward) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteSoftLineBackward) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteSoftLineBackward) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteSoftLineForward && y instanceof DeleteSoftLineForward) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteSoftLineForward) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteSoftLineForward) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteEntireSoftLine && y instanceof DeleteEntireSoftLine) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteEntireSoftLine) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteEntireSoftLine) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteHardLineBackward && y instanceof DeleteHardLineBackward) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteHardLineBackward) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteHardLineBackward) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteHardLineForward && y instanceof DeleteHardLineForward) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteHardLineForward) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteHardLineForward) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteByDrag && y instanceof DeleteByDrag) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteByDrag) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteByDrag) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteByCut && y instanceof DeleteByCut) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteByCut) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteByCut) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteContent && y instanceof DeleteContent) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteContent) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteContent) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteContentBackward && y instanceof DeleteContentBackward) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteContentBackward) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteContentBackward) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeleteContentForward && y instanceof DeleteContentForward) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeleteContentForward) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeleteContentForward) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof HistoryUndo && y instanceof HistoryUndo) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof HistoryUndo) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof HistoryUndo) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof HistoryRedo && y instanceof HistoryRedo) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof HistoryRedo) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof HistoryRedo) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatBold && y instanceof FormatBold) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatBold) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatBold) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatItalic && y instanceof FormatItalic) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatItalic) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatItalic) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatUnderline && y instanceof FormatUnderline) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatUnderline) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatUnderline) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatStrikeThrough && y instanceof FormatStrikeThrough) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatStrikeThrough) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatStrikeThrough) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatSuperscript && y instanceof FormatSuperscript) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatSuperscript) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatSuperscript) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatSubscript && y instanceof FormatSubscript) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatSubscript) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatSubscript) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatJustifyFull && y instanceof FormatJustifyFull) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatJustifyFull) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatJustifyFull) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatJustifyCenter && y instanceof FormatJustifyCenter) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatJustifyCenter) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatJustifyCenter) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatJustifyRight && y instanceof FormatJustifyRight) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatJustifyRight) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatJustifyRight) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatJustifyLeft && y instanceof FormatJustifyLeft) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatJustifyLeft) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatJustifyLeft) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatIndent && y instanceof FormatIndent) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatIndent) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatIndent) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatOutdent && y instanceof FormatOutdent) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatOutdent) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatOutdent) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatRemove && y instanceof FormatRemove) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatRemove) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatRemove) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatSetBlockTextDirection && y instanceof FormatSetBlockTextDirection) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatSetBlockTextDirection) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatSetBlockTextDirection) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatSetInlineTextDirection && y instanceof FormatSetInlineTextDirection) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatSetInlineTextDirection) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatSetInlineTextDirection) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatBackColor && y instanceof FormatBackColor) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatBackColor) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatBackColor) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatFontColor && y instanceof FormatFontColor) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatFontColor) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatFontColor) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FormatFontName && y instanceof FormatFontName) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FormatFontName) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FormatFontName) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Other && y instanceof Other) {
                return compare(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Web.UIEvent.InputEvent.InputType (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqInputType;
    }
};
export {
    InsertText,
    InsertReplacementText,
    InsertLineBreak,
    InsertParagraph,
    InsertOrderedList,
    InsertUnorderedList,
    InsertHorizontalRule,
    InsertFromYank,
    InsertFromDrop,
    InsertFromPaste,
    InsertFromPasteAsQuotation,
    InsertTranspose,
    InsertCompositionText,
    InsertLink,
    DeleteWordBackward,
    DeleteWordForward,
    DeleteSoftLineBackward,
    DeleteSoftLineForward,
    DeleteEntireSoftLine,
    DeleteHardLineBackward,
    DeleteHardLineForward,
    DeleteByDrag,
    DeleteByCut,
    DeleteContent,
    DeleteContentBackward,
    DeleteContentForward,
    HistoryUndo,
    HistoryRedo,
    FormatBold,
    FormatItalic,
    FormatUnderline,
    FormatStrikeThrough,
    FormatSuperscript,
    FormatSubscript,
    FormatJustifyFull,
    FormatJustifyCenter,
    FormatJustifyRight,
    FormatJustifyLeft,
    FormatIndent,
    FormatOutdent,
    FormatRemove,
    FormatSetBlockTextDirection,
    FormatSetInlineTextDirection,
    FormatBackColor,
    FormatFontColor,
    FormatFontName,
    Other,
    parse,
    print,
    eqInputType,
    ordInputType,
    showInputType
};
